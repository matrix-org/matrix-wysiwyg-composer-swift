// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(WysiwygComposerFFI)
    import WysiwygComposerFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_wysiwyg_composer_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_wysiwyg_composer_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterBool: FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol ComposerModelProtocol {
    func actionStates() -> [ComposerAction: ActionState]
    func backspace() throws -> ComposerUpdate
    func bold() throws -> ComposerUpdate
    func clear() throws -> ComposerUpdate
    func codeBlock() throws -> ComposerUpdate
    func debugPanic()
    func delete() throws -> ComposerUpdate
    func deleteIn(start: UInt32, end: UInt32) throws -> ComposerUpdate
    func enter() throws -> ComposerUpdate
    func getContentAsHtml() -> String
    func getContentAsMarkdown() -> String
    func getContentAsMessageHtml() -> String
    func getContentAsMessageMarkdown() -> String
    func getContentAsPlainText() -> String
    func getCurrentDomState() -> ComposerState
    func getLinkAction() -> LinkAction
    func getMentionsState() -> MentionsState
    func indent() throws -> ComposerUpdate
    func inlineCode() throws -> ComposerUpdate
    func insertAtRoomMention() throws -> ComposerUpdate
    func insertAtRoomMentionAtSuggestion(suggestion: SuggestionPattern) throws -> ComposerUpdate
    func insertMention(url: String, text: String, attributes: [Attribute]) throws -> ComposerUpdate
    func insertMentionAtSuggestion(url: String, text: String, suggestion: SuggestionPattern, attributes: [Attribute]) throws -> ComposerUpdate
    func italic() throws -> ComposerUpdate
    func orderedList() throws -> ComposerUpdate
    func quote() throws -> ComposerUpdate
    func redo() throws -> ComposerUpdate
    func removeLinks() throws -> ComposerUpdate
    func replaceText(newText: String) throws -> ComposerUpdate
    func replaceTextIn(newText: String, start: UInt32, end: UInt32) throws -> ComposerUpdate
    func replaceTextSuggestion(newText: String, suggestion: SuggestionPattern) throws -> ComposerUpdate
    func select(startUtf16Codeunit: UInt32, endUtf16Codeunit: UInt32) throws -> ComposerUpdate
    func setContentFromHtml(html: String) throws -> ComposerUpdate
    func setContentFromMarkdown(markdown: String) throws -> ComposerUpdate
    func setLink(url: String, attributes: [Attribute]) throws -> ComposerUpdate
    func setLinkWithText(url: String, text: String, attributes: [Attribute]) throws -> ComposerUpdate
    func strikeThrough() throws -> ComposerUpdate
    func toExampleFormat() -> String
    func toTree() -> String
    func underline() throws -> ComposerUpdate
    func undo() throws -> ComposerUpdate
    func unindent() throws -> ComposerUpdate
    func unorderedList() throws -> ComposerUpdate
}

public class ComposerModel: ComposerModelProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_uniffi_wysiwyg_composer_fn_free_composermodel(pointer, $0) }
    }

    public func actionStates() -> [ComposerAction: ActionState] {
        return try! FfiConverterDictionaryTypeComposerActionTypeActionState.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_action_states(self.pointer, $0)
                }
        )
    }

    public func backspace() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_backspace(self.pointer, $0)
                }
        )
    }

    public func bold() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_bold(self.pointer, $0)
                }
        )
    }

    public func clear() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_clear(self.pointer, $0)
                }
        )
    }

    public func codeBlock() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_code_block(self.pointer, $0)
                }
        )
    }

    public func debugPanic() {
        try!
            rustCall {
                uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_debug_panic(self.pointer, $0)
            }
    }

    public func delete() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_delete(self.pointer, $0)
                }
        )
    }

    public func deleteIn(start: UInt32, end: UInt32) throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_delete_in(self.pointer,
                                                                                     FfiConverterUInt32.lower(start),
                                                                                     FfiConverterUInt32.lower(end), $0)
                }
        )
    }

    public func enter() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_enter(self.pointer, $0)
                }
        )
    }

    public func getContentAsHtml() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_get_content_as_html(self.pointer, $0)
                }
        )
    }

    public func getContentAsMarkdown() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_get_content_as_markdown(self.pointer, $0)
                }
        )
    }

    public func getContentAsMessageHtml() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_get_content_as_message_html(self.pointer, $0)
                }
        )
    }

    public func getContentAsMessageMarkdown() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_get_content_as_message_markdown(self.pointer, $0)
                }
        )
    }

    public func getContentAsPlainText() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_get_content_as_plain_text(self.pointer, $0)
                }
        )
    }

    public func getCurrentDomState() -> ComposerState {
        return try! FfiConverterTypeComposerState.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_get_current_dom_state(self.pointer, $0)
                }
        )
    }

    public func getLinkAction() -> LinkAction {
        return try! FfiConverterTypeLinkAction.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_get_link_action(self.pointer, $0)
                }
        )
    }

    public func getMentionsState() -> MentionsState {
        return try! FfiConverterTypeMentionsState.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_get_mentions_state(self.pointer, $0)
                }
        )
    }

    public func indent() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_indent(self.pointer, $0)
                }
        )
    }

    public func inlineCode() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_inline_code(self.pointer, $0)
                }
        )
    }

    public func insertAtRoomMention() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_insert_at_room_mention(self.pointer, $0)
                }
        )
    }

    public func insertAtRoomMentionAtSuggestion(suggestion: SuggestionPattern) throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_insert_at_room_mention_at_suggestion(self.pointer,
                                                                                                                FfiConverterTypeSuggestionPattern.lower(suggestion), $0)
                }
        )
    }

    public func insertMention(url: String, text: String, attributes: [Attribute]) throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_insert_mention(self.pointer,
                                                                                          FfiConverterString.lower(url),
                                                                                          FfiConverterString.lower(text),
                                                                                          FfiConverterSequenceTypeAttribute.lower(attributes), $0)
                }
        )
    }

    public func insertMentionAtSuggestion(url: String, text: String, suggestion: SuggestionPattern, attributes: [Attribute]) throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_insert_mention_at_suggestion(self.pointer,
                                                                                                        FfiConverterString.lower(url),
                                                                                                        FfiConverterString.lower(text),
                                                                                                        FfiConverterTypeSuggestionPattern.lower(suggestion),
                                                                                                        FfiConverterSequenceTypeAttribute.lower(attributes), $0)
                }
        )
    }

    public func italic() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_italic(self.pointer, $0)
                }
        )
    }

    public func orderedList() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_ordered_list(self.pointer, $0)
                }
        )
    }

    public func quote() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_quote(self.pointer, $0)
                }
        )
    }

    public func redo() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_redo(self.pointer, $0)
                }
        )
    }

    public func removeLinks() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_remove_links(self.pointer, $0)
                }
        )
    }

    public func replaceText(newText: String) throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_replace_text(self.pointer,
                                                                                        FfiConverterString.lower(newText), $0)
                }
        )
    }

    public func replaceTextIn(newText: String, start: UInt32, end: UInt32) throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_replace_text_in(self.pointer,
                                                                                           FfiConverterString.lower(newText),
                                                                                           FfiConverterUInt32.lower(start),
                                                                                           FfiConverterUInt32.lower(end), $0)
                }
        )
    }

    public func replaceTextSuggestion(newText: String, suggestion: SuggestionPattern) throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_replace_text_suggestion(self.pointer,
                                                                                                   FfiConverterString.lower(newText),
                                                                                                   FfiConverterTypeSuggestionPattern.lower(suggestion), $0)
                }
        )
    }

    public func select(startUtf16Codeunit: UInt32, endUtf16Codeunit: UInt32) throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_select(self.pointer,
                                                                                  FfiConverterUInt32.lower(startUtf16Codeunit),
                                                                                  FfiConverterUInt32.lower(endUtf16Codeunit), $0)
                }
        )
    }

    public func setContentFromHtml(html: String) throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            rustCallWithError(FfiConverterTypeDomCreationError.lift) {
                uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_set_content_from_html(self.pointer,
                                                                                             FfiConverterString.lower(html), $0)
            }
        )
    }

    public func setContentFromMarkdown(markdown: String) throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            rustCallWithError(FfiConverterTypeDomCreationError.lift) {
                uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_set_content_from_markdown(self.pointer,
                                                                                                 FfiConverterString.lower(markdown), $0)
            }
        )
    }

    public func setLink(url: String, attributes: [Attribute]) throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_set_link(self.pointer,
                                                                                    FfiConverterString.lower(url),
                                                                                    FfiConverterSequenceTypeAttribute.lower(attributes), $0)
                }
        )
    }

    public func setLinkWithText(url: String, text: String, attributes: [Attribute]) throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_set_link_with_text(self.pointer,
                                                                                              FfiConverterString.lower(url),
                                                                                              FfiConverterString.lower(text),
                                                                                              FfiConverterSequenceTypeAttribute.lower(attributes), $0)
                }
        )
    }

    public func strikeThrough() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_strike_through(self.pointer, $0)
                }
        )
    }

    public func toExampleFormat() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_to_example_format(self.pointer, $0)
                }
        )
    }

    public func toTree() -> String {
        return try! FfiConverterString.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_to_tree(self.pointer, $0)
                }
        )
    }

    public func underline() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_underline(self.pointer, $0)
                }
        )
    }

    public func undo() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_undo(self.pointer, $0)
                }
        )
    }

    public func unindent() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_unindent(self.pointer, $0)
                }
        )
    }

    public func unorderedList() throws -> ComposerUpdate {
        return try FfiConverterTypeComposerUpdate.lift(
            try
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composermodel_unordered_list(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeComposerModel: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ComposerModel

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ComposerModel {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ComposerModel, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ComposerModel {
        return ComposerModel(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ComposerModel) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeComposerModel_lift(_ pointer: UnsafeMutableRawPointer) throws -> ComposerModel {
    return try FfiConverterTypeComposerModel.lift(pointer)
}

public func FfiConverterTypeComposerModel_lower(_ value: ComposerModel) -> UnsafeMutableRawPointer {
    return FfiConverterTypeComposerModel.lower(value)
}

public protocol ComposerUpdateProtocol {
    func linkAction() -> LinkActionUpdate
    func menuAction() -> MenuAction
    func menuState() -> MenuState
    func textUpdate() -> TextUpdate
}

public class ComposerUpdate: ComposerUpdateProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_uniffi_wysiwyg_composer_fn_free_composerupdate(pointer, $0) }
    }

    public func linkAction() -> LinkActionUpdate {
        return try! FfiConverterTypeLinkActionUpdate.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composerupdate_link_action(self.pointer, $0)
                }
        )
    }

    public func menuAction() -> MenuAction {
        return try! FfiConverterTypeMenuAction.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composerupdate_menu_action(self.pointer, $0)
                }
        )
    }

    public func menuState() -> MenuState {
        return try! FfiConverterTypeMenuState.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composerupdate_menu_state(self.pointer, $0)
                }
        )
    }

    public func textUpdate() -> TextUpdate {
        return try! FfiConverterTypeTextUpdate.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_composerupdate_text_update(self.pointer, $0)
                }
        )
    }
}

public struct FfiConverterTypeComposerUpdate: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ComposerUpdate

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ComposerUpdate {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ComposerUpdate, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ComposerUpdate {
        return ComposerUpdate(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ComposerUpdate) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeComposerUpdate_lift(_ pointer: UnsafeMutableRawPointer) throws -> ComposerUpdate {
    return try FfiConverterTypeComposerUpdate.lift(pointer)
}

public func FfiConverterTypeComposerUpdate_lower(_ value: ComposerUpdate) -> UnsafeMutableRawPointer {
    return FfiConverterTypeComposerUpdate.lower(value)
}

public protocol MentionDetectorProtocol {
    func isMention(url: String) -> Bool
}

public class MentionDetector: MentionDetectorProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_uniffi_wysiwyg_composer_fn_free_mentiondetector(pointer, $0) }
    }

    public func isMention(url: String) -> Bool {
        return try! FfiConverterBool.lift(
            try!
                rustCall {
                    uniffi_uniffi_wysiwyg_composer_fn_method_mentiondetector_is_mention(self.pointer,
                                                                                        FfiConverterString.lower(url), $0)
                }
        )
    }
}

public struct FfiConverterTypeMentionDetector: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = MentionDetector

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MentionDetector {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: MentionDetector, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> MentionDetector {
        return MentionDetector(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: MentionDetector) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

public func FfiConverterTypeMentionDetector_lift(_ pointer: UnsafeMutableRawPointer) throws -> MentionDetector {
    return try FfiConverterTypeMentionDetector.lift(pointer)
}

public func FfiConverterTypeMentionDetector_lower(_ value: MentionDetector) -> UnsafeMutableRawPointer {
    return FfiConverterTypeMentionDetector.lower(value)
}

public struct Attribute {
    public var key: String
    public var value: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(key: String, value: String) {
        self.key = key
        self.value = value
    }
}

extension Attribute: Equatable, Hashable {
    public static func == (lhs: Attribute, rhs: Attribute) -> Bool {
        if lhs.key != rhs.key {
            return false
        }
        if lhs.value != rhs.value {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(key)
        hasher.combine(value)
    }
}

public struct FfiConverterTypeAttribute: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Attribute {
        return try Attribute(
            key: FfiConverterString.read(from: &buf),
            value: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Attribute, into buf: inout [UInt8]) {
        FfiConverterString.write(value.key, into: &buf)
        FfiConverterString.write(value.value, into: &buf)
    }
}

public func FfiConverterTypeAttribute_lift(_ buf: RustBuffer) throws -> Attribute {
    return try FfiConverterTypeAttribute.lift(buf)
}

public func FfiConverterTypeAttribute_lower(_ value: Attribute) -> RustBuffer {
    return FfiConverterTypeAttribute.lower(value)
}

public struct ComposerState {
    public var html: [UInt16]
    public var start: UInt32
    public var end: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(html: [UInt16], start: UInt32, end: UInt32) {
        self.html = html
        self.start = start
        self.end = end
    }
}

extension ComposerState: Equatable, Hashable {
    public static func == (lhs: ComposerState, rhs: ComposerState) -> Bool {
        if lhs.html != rhs.html {
            return false
        }
        if lhs.start != rhs.start {
            return false
        }
        if lhs.end != rhs.end {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(html)
        hasher.combine(start)
        hasher.combine(end)
    }
}

public struct FfiConverterTypeComposerState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ComposerState {
        return try ComposerState(
            html: FfiConverterSequenceUInt16.read(from: &buf),
            start: FfiConverterUInt32.read(from: &buf),
            end: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: ComposerState, into buf: inout [UInt8]) {
        FfiConverterSequenceUInt16.write(value.html, into: &buf)
        FfiConverterUInt32.write(value.start, into: &buf)
        FfiConverterUInt32.write(value.end, into: &buf)
    }
}

public func FfiConverterTypeComposerState_lift(_ buf: RustBuffer) throws -> ComposerState {
    return try FfiConverterTypeComposerState.lift(buf)
}

public func FfiConverterTypeComposerState_lower(_ value: ComposerState) -> RustBuffer {
    return FfiConverterTypeComposerState.lower(value)
}

public struct MentionsState {
    public var userIds: [String]
    public var roomIds: [String]
    public var roomAliases: [String]
    public var hasAtRoomMention: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(userIds: [String], roomIds: [String], roomAliases: [String], hasAtRoomMention: Bool) {
        self.userIds = userIds
        self.roomIds = roomIds
        self.roomAliases = roomAliases
        self.hasAtRoomMention = hasAtRoomMention
    }
}

extension MentionsState: Equatable, Hashable {
    public static func == (lhs: MentionsState, rhs: MentionsState) -> Bool {
        if lhs.userIds != rhs.userIds {
            return false
        }
        if lhs.roomIds != rhs.roomIds {
            return false
        }
        if lhs.roomAliases != rhs.roomAliases {
            return false
        }
        if lhs.hasAtRoomMention != rhs.hasAtRoomMention {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(userIds)
        hasher.combine(roomIds)
        hasher.combine(roomAliases)
        hasher.combine(hasAtRoomMention)
    }
}

public struct FfiConverterTypeMentionsState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MentionsState {
        return try MentionsState(
            userIds: FfiConverterSequenceString.read(from: &buf),
            roomIds: FfiConverterSequenceString.read(from: &buf),
            roomAliases: FfiConverterSequenceString.read(from: &buf),
            hasAtRoomMention: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: MentionsState, into buf: inout [UInt8]) {
        FfiConverterSequenceString.write(value.userIds, into: &buf)
        FfiConverterSequenceString.write(value.roomIds, into: &buf)
        FfiConverterSequenceString.write(value.roomAliases, into: &buf)
        FfiConverterBool.write(value.hasAtRoomMention, into: &buf)
    }
}

public func FfiConverterTypeMentionsState_lift(_ buf: RustBuffer) throws -> MentionsState {
    return try FfiConverterTypeMentionsState.lift(buf)
}

public func FfiConverterTypeMentionsState_lower(_ value: MentionsState) -> RustBuffer {
    return FfiConverterTypeMentionsState.lower(value)
}

public struct SuggestionPattern {
    public var key: PatternKey
    public var text: String
    public var start: UInt32
    public var end: UInt32

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(key: PatternKey, text: String, start: UInt32, end: UInt32) {
        self.key = key
        self.text = text
        self.start = start
        self.end = end
    }
}

extension SuggestionPattern: Equatable, Hashable {
    public static func == (lhs: SuggestionPattern, rhs: SuggestionPattern) -> Bool {
        if lhs.key != rhs.key {
            return false
        }
        if lhs.text != rhs.text {
            return false
        }
        if lhs.start != rhs.start {
            return false
        }
        if lhs.end != rhs.end {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(key)
        hasher.combine(text)
        hasher.combine(start)
        hasher.combine(end)
    }
}

public struct FfiConverterTypeSuggestionPattern: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SuggestionPattern {
        return try SuggestionPattern(
            key: FfiConverterTypePatternKey.read(from: &buf),
            text: FfiConverterString.read(from: &buf),
            start: FfiConverterUInt32.read(from: &buf),
            end: FfiConverterUInt32.read(from: &buf)
        )
    }

    public static func write(_ value: SuggestionPattern, into buf: inout [UInt8]) {
        FfiConverterTypePatternKey.write(value.key, into: &buf)
        FfiConverterString.write(value.text, into: &buf)
        FfiConverterUInt32.write(value.start, into: &buf)
        FfiConverterUInt32.write(value.end, into: &buf)
    }
}

public func FfiConverterTypeSuggestionPattern_lift(_ buf: RustBuffer) throws -> SuggestionPattern {
    return try FfiConverterTypeSuggestionPattern.lift(buf)
}

public func FfiConverterTypeSuggestionPattern_lower(_ value: SuggestionPattern) -> RustBuffer {
    return FfiConverterTypeSuggestionPattern.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ActionState {
    case enabled
    case reversed
    case disabled
}

public struct FfiConverterTypeActionState: FfiConverterRustBuffer {
    typealias SwiftType = ActionState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ActionState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .enabled

        case 2: return .reversed

        case 3: return .disabled

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ActionState, into buf: inout [UInt8]) {
        switch value {
        case .enabled:
            writeInt(&buf, Int32(1))

        case .reversed:
            writeInt(&buf, Int32(2))

        case .disabled:
            writeInt(&buf, Int32(3))
        }
    }
}

public func FfiConverterTypeActionState_lift(_ buf: RustBuffer) throws -> ActionState {
    return try FfiConverterTypeActionState.lift(buf)
}

public func FfiConverterTypeActionState_lower(_ value: ActionState) -> RustBuffer {
    return FfiConverterTypeActionState.lower(value)
}

extension ActionState: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ComposerAction {
    case bold
    case italic
    case strikeThrough
    case underline
    case inlineCode
    case link
    case undo
    case redo
    case orderedList
    case unorderedList
    case indent
    case unindent
    case codeBlock
    case quote
}

public struct FfiConverterTypeComposerAction: FfiConverterRustBuffer {
    typealias SwiftType = ComposerAction

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ComposerAction {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .bold

        case 2: return .italic

        case 3: return .strikeThrough

        case 4: return .underline

        case 5: return .inlineCode

        case 6: return .link

        case 7: return .undo

        case 8: return .redo

        case 9: return .orderedList

        case 10: return .unorderedList

        case 11: return .indent

        case 12: return .unindent

        case 13: return .codeBlock

        case 14: return .quote

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ComposerAction, into buf: inout [UInt8]) {
        switch value {
        case .bold:
            writeInt(&buf, Int32(1))

        case .italic:
            writeInt(&buf, Int32(2))

        case .strikeThrough:
            writeInt(&buf, Int32(3))

        case .underline:
            writeInt(&buf, Int32(4))

        case .inlineCode:
            writeInt(&buf, Int32(5))

        case .link:
            writeInt(&buf, Int32(6))

        case .undo:
            writeInt(&buf, Int32(7))

        case .redo:
            writeInt(&buf, Int32(8))

        case .orderedList:
            writeInt(&buf, Int32(9))

        case .unorderedList:
            writeInt(&buf, Int32(10))

        case .indent:
            writeInt(&buf, Int32(11))

        case .unindent:
            writeInt(&buf, Int32(12))

        case .codeBlock:
            writeInt(&buf, Int32(13))

        case .quote:
            writeInt(&buf, Int32(14))
        }
    }
}

public func FfiConverterTypeComposerAction_lift(_ buf: RustBuffer) throws -> ComposerAction {
    return try FfiConverterTypeComposerAction.lift(buf)
}

public func FfiConverterTypeComposerAction_lower(_ value: ComposerAction) -> RustBuffer {
    return FfiConverterTypeComposerAction.lower(value)
}

extension ComposerAction: Equatable, Hashable {}

public enum DomCreationError {
    case HtmlParseError
    case MarkdownParseError

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeDomCreationError.lift(error)
    }
}

public struct FfiConverterTypeDomCreationError: FfiConverterRustBuffer {
    typealias SwiftType = DomCreationError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DomCreationError {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .HtmlParseError
        case 2: return .MarkdownParseError

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DomCreationError, into buf: inout [UInt8]) {
        switch value {
        case .HtmlParseError:
            writeInt(&buf, Int32(1))

        case .MarkdownParseError:
            writeInt(&buf, Int32(2))
        }
    }
}

extension DomCreationError: Equatable, Hashable {}

extension DomCreationError: Error {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum LinkAction {
    case createWithText
    case create
    case edit(url: String)
    case disabled
}

public struct FfiConverterTypeLinkAction: FfiConverterRustBuffer {
    typealias SwiftType = LinkAction

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LinkAction {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .createWithText

        case 2: return .create

        case 3: return try .edit(
                url: FfiConverterString.read(from: &buf)
            )

        case 4: return .disabled

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LinkAction, into buf: inout [UInt8]) {
        switch value {
        case .createWithText:
            writeInt(&buf, Int32(1))

        case .create:
            writeInt(&buf, Int32(2))

        case let .edit(url):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(url, into: &buf)

        case .disabled:
            writeInt(&buf, Int32(4))
        }
    }
}

public func FfiConverterTypeLinkAction_lift(_ buf: RustBuffer) throws -> LinkAction {
    return try FfiConverterTypeLinkAction.lift(buf)
}

public func FfiConverterTypeLinkAction_lower(_ value: LinkAction) -> RustBuffer {
    return FfiConverterTypeLinkAction.lower(value)
}

extension LinkAction: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum LinkActionUpdate {
    case keep
    case update(linkAction: LinkAction)
}

public struct FfiConverterTypeLinkActionUpdate: FfiConverterRustBuffer {
    typealias SwiftType = LinkActionUpdate

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LinkActionUpdate {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .keep

        case 2: return try .update(
                linkAction: FfiConverterTypeLinkAction.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LinkActionUpdate, into buf: inout [UInt8]) {
        switch value {
        case .keep:
            writeInt(&buf, Int32(1))

        case let .update(linkAction):
            writeInt(&buf, Int32(2))
            FfiConverterTypeLinkAction.write(linkAction, into: &buf)
        }
    }
}

public func FfiConverterTypeLinkActionUpdate_lift(_ buf: RustBuffer) throws -> LinkActionUpdate {
    return try FfiConverterTypeLinkActionUpdate.lift(buf)
}

public func FfiConverterTypeLinkActionUpdate_lower(_ value: LinkActionUpdate) -> RustBuffer {
    return FfiConverterTypeLinkActionUpdate.lower(value)
}

extension LinkActionUpdate: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum MenuAction {
    case keep
    case none
    case suggestion(suggestionPattern: SuggestionPattern)
}

public struct FfiConverterTypeMenuAction: FfiConverterRustBuffer {
    typealias SwiftType = MenuAction

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MenuAction {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .keep

        case 2: return .none

        case 3: return try .suggestion(
                suggestionPattern: FfiConverterTypeSuggestionPattern.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MenuAction, into buf: inout [UInt8]) {
        switch value {
        case .keep:
            writeInt(&buf, Int32(1))

        case .none:
            writeInt(&buf, Int32(2))

        case let .suggestion(suggestionPattern):
            writeInt(&buf, Int32(3))
            FfiConverterTypeSuggestionPattern.write(suggestionPattern, into: &buf)
        }
    }
}

public func FfiConverterTypeMenuAction_lift(_ buf: RustBuffer) throws -> MenuAction {
    return try FfiConverterTypeMenuAction.lift(buf)
}

public func FfiConverterTypeMenuAction_lower(_ value: MenuAction) -> RustBuffer {
    return FfiConverterTypeMenuAction.lower(value)
}

extension MenuAction: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum MenuState {
    case keep
    case update(actionStates: [ComposerAction: ActionState])
}

public struct FfiConverterTypeMenuState: FfiConverterRustBuffer {
    typealias SwiftType = MenuState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MenuState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .keep

        case 2: return try .update(
                actionStates: FfiConverterDictionaryTypeComposerActionTypeActionState.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MenuState, into buf: inout [UInt8]) {
        switch value {
        case .keep:
            writeInt(&buf, Int32(1))

        case let .update(actionStates):
            writeInt(&buf, Int32(2))
            FfiConverterDictionaryTypeComposerActionTypeActionState.write(actionStates, into: &buf)
        }
    }
}

public func FfiConverterTypeMenuState_lift(_ buf: RustBuffer) throws -> MenuState {
    return try FfiConverterTypeMenuState.lift(buf)
}

public func FfiConverterTypeMenuState_lower(_ value: MenuState) -> RustBuffer {
    return FfiConverterTypeMenuState.lower(value)
}

extension MenuState: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum PatternKey {
    case at
    case hash
    case slash
}

public struct FfiConverterTypePatternKey: FfiConverterRustBuffer {
    typealias SwiftType = PatternKey

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PatternKey {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .at

        case 2: return .hash

        case 3: return .slash

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PatternKey, into buf: inout [UInt8]) {
        switch value {
        case .at:
            writeInt(&buf, Int32(1))

        case .hash:
            writeInt(&buf, Int32(2))

        case .slash:
            writeInt(&buf, Int32(3))
        }
    }
}

public func FfiConverterTypePatternKey_lift(_ buf: RustBuffer) throws -> PatternKey {
    return try FfiConverterTypePatternKey.lift(buf)
}

public func FfiConverterTypePatternKey_lower(_ value: PatternKey) -> RustBuffer {
    return FfiConverterTypePatternKey.lower(value)
}

extension PatternKey: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum TextUpdate {
    case keep
    case replaceAll(replacementHtml: [UInt16], startUtf16Codeunit: UInt32, endUtf16Codeunit: UInt32)
    case select(startUtf16Codeunit: UInt32, endUtf16Codeunit: UInt32)
}

public struct FfiConverterTypeTextUpdate: FfiConverterRustBuffer {
    typealias SwiftType = TextUpdate

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TextUpdate {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .keep

        case 2: return try .replaceAll(
                replacementHtml: FfiConverterSequenceUInt16.read(from: &buf),
                startUtf16Codeunit: FfiConverterUInt32.read(from: &buf),
                endUtf16Codeunit: FfiConverterUInt32.read(from: &buf)
            )

        case 3: return try .select(
                startUtf16Codeunit: FfiConverterUInt32.read(from: &buf),
                endUtf16Codeunit: FfiConverterUInt32.read(from: &buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TextUpdate, into buf: inout [UInt8]) {
        switch value {
        case .keep:
            writeInt(&buf, Int32(1))

        case let .replaceAll(replacementHtml, startUtf16Codeunit, endUtf16Codeunit):
            writeInt(&buf, Int32(2))
            FfiConverterSequenceUInt16.write(replacementHtml, into: &buf)
            FfiConverterUInt32.write(startUtf16Codeunit, into: &buf)
            FfiConverterUInt32.write(endUtf16Codeunit, into: &buf)

        case let .select(startUtf16Codeunit, endUtf16Codeunit):
            writeInt(&buf, Int32(3))
            FfiConverterUInt32.write(startUtf16Codeunit, into: &buf)
            FfiConverterUInt32.write(endUtf16Codeunit, into: &buf)
        }
    }
}

public func FfiConverterTypeTextUpdate_lift(_ buf: RustBuffer) throws -> TextUpdate {
    return try FfiConverterTypeTextUpdate.lift(buf)
}

public func FfiConverterTypeTextUpdate_lower(_ value: TextUpdate) -> RustBuffer {
    return FfiConverterTypeTextUpdate.lower(value)
}

extension TextUpdate: Equatable, Hashable {}

private struct FfiConverterSequenceUInt16: FfiConverterRustBuffer {
    typealias SwiftType = [UInt16]

    public static func write(_ value: [UInt16], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt16.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt16] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt16]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterUInt16.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterSequenceTypeAttribute: FfiConverterRustBuffer {
    typealias SwiftType = [Attribute]

    public static func write(_ value: [Attribute], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAttribute.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Attribute] {
        let len: Int32 = try readInt(&buf)
        var seq = [Attribute]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeAttribute.read(from: &buf))
        }
        return seq
    }
}

private struct FfiConverterDictionaryTypeComposerActionTypeActionState: FfiConverterRustBuffer {
    public static func write(_ value: [ComposerAction: ActionState], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterTypeComposerAction.write(key, into: &buf)
            FfiConverterTypeActionState.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ComposerAction: ActionState] {
        let len: Int32 = try readInt(&buf)
        var dict = [ComposerAction: ActionState]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let key = try FfiConverterTypeComposerAction.read(from: &buf)
            let value = try FfiConverterTypeActionState.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

public func newComposerModel() -> ComposerModel {
    return try! FfiConverterTypeComposerModel.lift(
        try! rustCall {
            uniffi_uniffi_wysiwyg_composer_fn_func_new_composer_model($0)
        }
    )
}

public func newMentionDetector() -> MentionDetector {
    return try! FfiConverterTypeMentionDetector.lift(
        try! rustCall {
            uniffi_uniffi_wysiwyg_composer_fn_func_new_mention_detector($0)
        }
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 22
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_wysiwyg_composer_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_func_new_composer_model() != 61235 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_func_new_mention_detector() != 30911 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_action_states() != 7578 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_backspace() != 46658 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_bold() != 23083 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_clear() != 38972 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_code_block() != 15363 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_debug_panic() != 36233 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_delete() != 52228 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_delete_in() != 43004 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_enter() != 1368 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_get_content_as_html() != 55597 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_get_content_as_markdown() != 59485 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_get_content_as_message_html() != 53003 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_get_content_as_message_markdown() != 20680 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_get_content_as_plain_text() != 37982 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_get_current_dom_state() != 14677 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_get_link_action() != 2600 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_get_mentions_state() != 20232 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_indent() != 48116 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_inline_code() != 62544 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_insert_at_room_mention() != 10288 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_insert_at_room_mention_at_suggestion() != 3469 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_insert_mention() != 4346 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_insert_mention_at_suggestion() != 14853 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_italic() != 49342 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_ordered_list() != 41846 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_quote() != 4694 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_redo() != 19040 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_remove_links() != 34893 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_replace_text() != 41304 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_replace_text_in() != 30443 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_replace_text_suggestion() != 42367 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_select() != 61542 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_set_content_from_html() != 59898 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_set_content_from_markdown() != 8457 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_set_link() != 1977 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_set_link_with_text() != 36637 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_strike_through() != 57768 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_to_example_format() != 41787 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_to_tree() != 48533 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_underline() != 47132 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_undo() != 57508 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_unindent() != 14918 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composermodel_unordered_list() != 28490 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composerupdate_link_action() != 4137 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composerupdate_menu_action() != 30532 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composerupdate_menu_state() != 64348 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_composerupdate_text_update() != 40178 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_uniffi_wysiwyg_composer_checksum_method_mentiondetector_is_mention() != 64462 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
